# Convert to mlogit.data format
mlogit_data <- mlogit.data(minivan_long, choice = "choice", shape = "long")
library(nnet)
data <- read.csv('/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/rintro-chapter13conjoint.csv')
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Rename levels to avoid issues with spaces
levels(data$seat) <- gsub(" ", "_", levels(data$seat))
levels(data$cargo) <- gsub(" ", "_", levels(data$cargo))
levels(data$eng) <- gsub(" ", "_", levels(data$eng))
# Relevel factors to set the reference levels
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary(model)
# Extract coefficients and standard errors
coefficients <- summary(model)$coefficients
standard_errors <- summary(model)$standard.errors
# Create a table of coefficients and standard errors
result_table <- data.frame(
Variable = rownames(coefficients),
Coefficient = as.vector(coefficients),
`Std. Error` = as.vector(standard_errors)
)
library(nnet)
data <- read.csv('/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/rintro-chapter13conjoint.csv')
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Rename levels to avoid issues with spaces
levels(data$seat) <- gsub(" ", "_", levels(data$seat))
levels(data$cargo) <- gsub(" ", "_", levels(data$cargo))
levels(data$eng) <- gsub(" ", "_", levels(data$eng))
# Relevel factors to set the reference levels
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary(model)
# Extract coefficients and standard errors
coefficients <- summary(model)$coefficients
standard_errors <- summary(model)$standard.errors
# Create a table of coefficients and standard errors
result_table <- data.frame(
Variable = rownames(coefficients),
Coefficient = as.vector(coefficients),
`Std. Error` = as.vector(standard_errors)
)
kable(result_table, format = "markdown", caption = "Coefficients and Standard Errors of Multinomial Logistic Regression")
library(nnet)
library(reshape2)
install.packages("reshape2")
library(nnet)
library(reshape2)
data <- read.csv('/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/rintro-chapter13conjoint.csv')
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Rename levels to avoid issues with spaces
levels(data$seat) <- gsub(" ", "_", levels(data$seat))
levels(data$cargo) <- gsub(" ", "_", levels(data$cargo))
levels(data$eng) <- gsub(" ", "_", levels(data$eng))
# Relevel factors to set the reference levels
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary(model)
# Extract coefficients and standard errors
coefficients <- summary(model)$coefficients
standard_errors <- summary(model)$standard.errors
# Melt the data frames to long format for easy merging
coefficients_long <- melt(coefficients_df, varnames = c("Alternative", "Variable"), value.name = "Coefficient")
library(nnet)
library(knitr)
library(tidyr)
library(reshape2)
data <- read.csv('/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/rintro-chapter13conjoint.csv')
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Rename levels to avoid issues with spaces
levels(data$seat) <- gsub(" ", "_", levels(data$seat))
levels(data$cargo) <- gsub(" ", "_", levels(data$cargo))
levels(data$eng) <- gsub(" ", "_", levels(data$eng))
# Relevel factors to set the reference levels
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary(model)
# Extract coefficients and standard errors
coefficients <- summary(model)$coefficients
standard_errors <- summary(model)$standard.errors
# Melt the data frames to long format for easy merging
coefficients_long <- melt(coefficients_df, varnames = c("Alternative", "Variable"), value.name = "Coefficient")
library(nnet)
library(knitr)
library(tidyr)
library(dplyr)
library(reshape2)
data <- read.csv('/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/rintro-chapter13conjoint.csv')
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Rename levels to avoid issues with spaces
levels(data$seat) <- gsub(" ", "_", levels(data$seat))
levels(data$cargo) <- gsub(" ", "_", levels(data$cargo))
levels(data$eng) <- gsub(" ", "_", levels(data$eng))
# Relevel factors to set the reference levels
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary_model <- summary(model)
# Extract coefficients and standard errors
coefficients <- as.data.frame(summary_model$coefficients)
standard_errors <- as.data.frame(summary_model$standard.errors)
# Convert row names to a column
coefficients <- coefficients %>%
rownames_to_column(var = "Alternative")
standard_errors <- standard_errors %>%
rownames_to_column(var = "Alternative")
# Gather the data frames to long format for easy merging
coefficients_long <- coefficients %>%
gather(key = "Variable", value = "Coefficient", -Alternative)
standard_errors_long <- standard_errors %>%
gather(key = "Variable", value = "Std. Error", -Alternative)
# Merge the coefficients and standard errors into a single data frame
result_table <- merge(coefficients_long, standard_errors_long, by = c("Alternative", "Variable"))
# Print the result table using knitr::kable for a well-formatted table
kable(result_table, format = "markdown", caption = "Coefficients and Standard Errors of Multinomial Logistic Regression")
library(knitr)
result_table <- merge(coefficients_long, standard_errors_long, by = c("Alternative", "Variable"))
library(nnet)
library(tidyr)
library(dplyr)
library(reshape2)
data <- read.csv('/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/rintro-chapter13conjoint.csv')
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Rename levels to avoid issues with spaces
levels(data$seat) <- gsub(" ", "_", levels(data$seat))
levels(data$cargo) <- gsub(" ", "_", levels(data$cargo))
levels(data$eng) <- gsub(" ", "_", levels(data$eng))
# Relevel factors to set the reference levels
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary_model <- summary(model)
# Extract coefficients and standard errors
coefficients <- as.data.frame(summary_model$coefficients)
standard_errors <- as.data.frame(summary_model$standard.errors)
# Convert row names to a column
coefficients <- coefficients %>%
rownames_to_column(var = "Alternative")
library(knitr)
result_table <- merge(coefficients_long, standard_errors_long, by = c("Alternative", "Variable"))
library(nnet)
library(tidyr)
library(dplyr)
library(reshape2)
library(tibble)
library(knitr)
data <- read.csv('/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/rintro-chapter13conjoint.csv')
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Rename levels to avoid issues with spaces
levels(data$seat) <- gsub(" ", "_", levels(data$seat))
levels(data$cargo) <- gsub(" ", "_", levels(data$cargo))
levels(data$eng) <- gsub(" ", "_", levels(data$eng))
# Relevel factors to set the reference levels
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary_model <- summary(model)
# Extract coefficients and standard errors
coefficients <- as.data.frame(summary_model$coefficients)
standard_errors <- as.data.frame(summary_model$standard.errors)
# Convert row names to a column
coefficients <- coefficients %>%
rownames_to_column(var = "Alternative")
standard_errors <- standard_errors %>%
rownames_to_column(var = "Alternative")
# Gather the data frames to long format for easy merging
coefficients_long <- coefficients %>%
gather(key = "Variable", value = "Coefficient", -Alternative)
standard_errors_long <- standard_errors %>%
gather(key = "Variable", value = "Std. Error", -Alternative)
# Merge the coefficients and standard errors into a single data frame
result_table <- merge(coefficients_long, standard_errors_long, by = c("Alternative", "Variable"))
# Print the result table using knitr::kable for a well-formatted table
kable(result_table, format = "markdown", caption = "Coefficients and Standard Errors of Multinomial Logistic Regression")
library(nnet)
library(tidyr)
library(dplyr)
library(reshape2)
library(tibble)
library(knitr)
data <- read.csv('/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/rintro-chapter13conjoint.csv')
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Rename levels to avoid issues with spaces
levels(data$seat) <- gsub(" ", "_", levels(data$seat))
levels(data$cargo) <- gsub(" ", "_", levels(data$cargo))
levels(data$eng) <- gsub(" ", "_", levels(data$eng))
# Relevel factors to set the reference levels
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary_model <- summary(model)
# Extract coefficients and standard errors
coefficients <- as.data.frame(summary_model$coefficients)
standard_errors <- as.data.frame(summary_model$standard.errors)
# Convert row names to a column
coefficients <- coefficients %>%
rownames_to_column(var = "Alternative")
standard_errors <- standard_errors %>%
rownames_to_column(var = "Alternative")
# Gather the data frames to long format for easy merging
coefficients_long <- coefficients %>%
gather(key = "Variable", value = "Coefficient", -Alternative)
standard_errors_long <- standard_errors %>%
gather(key = "Variable", value = "Std. Error", -Alternative)
# Merge the coefficients and standard errors into a single data frame
result_table <- merge(coefficients_long, standard_errors_long, by = c("Alternative", "Variable"))
# Print the result table using knitr::kable for a well-formatted table
kable(result_table, format = "markdown", caption = "Coefficients and Standard Errors of Multinomial Logistic Regression")
library(nnet)
library(tidyr)
library(dplyr)
library(reshape2)
library(tibble)
library(knitr)
data <- read.csv('/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/rintro-chapter13conjoint.csv')
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Rename levels to avoid issues with spaces
levels(data$seat) <- gsub(" ", "_", levels(data$seat))
levels(data$cargo) <- gsub(" ", "_", levels(data$cargo))
levels(data$eng) <- gsub(" ", "_", levels(data$eng))
# Relevel factors to set the reference levels
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary_model <- summary(model)
# Extract coefficients and standard errors
coefficients <- as.data.frame(summary_model$coefficients)
standard_errors <- as.data.frame(summary_model$standard.errors)
# Convert row names to a column
coefficients <- rownames_to_column(coefficients, var = "Variable")
standard_errors <- rownames_to_column(standard_errors, var = "Variable")
# Merge the coefficients and standard errors into a single data frame
result_table <- merge(coefficients, standard_errors, by = "Variable")
# Select and rename the relevant columns
result_table <- result_table %>%
select(Variable, Coefficient = V1.x, `Std. Error` = V1.y)
library(nnet)
library(tidyr)
library(dplyr)
library(reshape2)
library(tibble)
library(knitr)
data <- read.csv('/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/rintro-chapter13conjoint.csv')
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Relevel factors to set the reference levels to avoid multicollinearity
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary_model <- summary(model)
# Extract coefficients and standard errors
coefficients <- as.data.frame(summary_model$coefficients)
standard_errors <- as.data.frame(summary_model$standard.errors)
# Convert row names to a column
coefficients <- rownames_to_column(coefficients, var = "Variable")
standard_errors <- rownames_to_column(standard_errors, var = "Variable")
# Gather the data frames to long format for easy merging
coefficients_long <- coefficients %>%
gather(key = "Alternative", value = "Coefficient", -Variable)
standard_errors_long <- standard_errors %>%
gather(key = "Alternative", value = "Std. Error", -Variable)
# Merge the coefficients and standard errors into a single data frame
result_table <- merge(coefficients_long, standard_errors_long, by = c("Variable", "Alternative"))
# Print the result table using knitr::kable for a well-formatted table
kable(result_table, format = "markdown", caption = "Coefficients and Standard Errors of Multinomial Logistic Regression")
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Rename levels to avoid issues with spaces
levels(data$seat) <- gsub(" ", "_", levels(data$seat))
levels(data$cargo) <- gsub(" ", "_", levels(data$cargo))
levels(data$eng) <- gsub(" ", "_", levels(data$eng))
# Relevel factors to set the reference levels
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary(model)
# Extract coefficients and standard errors
coefficients <- summary(model)$coefficients
standard_errors <- summary(model)$standard.errors
# Create a table of coefficients and standard errors
result_table <- data.frame(
Variable = rownames(coefficients),
Coefficient = as.vector(coefficients),
`Std. Error` = as.vector(standard_errors)
)
# Convert categorical variables to factors
data$seat <- as.factor(data$seat)
data$cargo <- as.factor(data$cargo)
data$eng <- as.factor(data$eng)
# Relevel factors to set the reference levels to avoid multicollinearity
data$seat <- relevel(data$seat, ref = "6")
data$cargo <- relevel(data$cargo, ref = "2ft")
data$eng <- relevel(data$eng, ref = "gas")
# Fit the multinomial logistic regression model
model <- multinom(choice ~ price + seat + cargo + eng, data = data)
# Summarize the model
summary_model <- summary(model)
# Extract coefficients and standard errors
coefficients <- as.data.frame(summary_model$coefficients)
standard_errors <- as.data.frame(summary_model$standard.errors)
# Convert row names to a column
coefficients <- rownames_to_column(coefficients, var = "Variable")
standard_errors <- rownames_to_column(standard_errors, var = "Variable")
# Gather the data frames to long format for easy merging
coefficients_long <- coefficients %>%
gather(key = "Alternative", value = "Coefficient", -Variable)
standard_errors_long <- standard_errors %>%
gather(key = "Alternative", value = "Std. Error", -Variable)
# Merge the coefficients and standard errors into a single data frame
result_table <- merge(coefficients_long, standard_errors_long, by = c("Variable", "Alternative"))
# Print the result table using knitr::kable for a well-formatted table
kable(result_table, format = "markdown", caption = "Coefficients and Standard Errors of Multinomial Logistic Regression")
# Reshape the data from wide to long format
yogurt_long <- yogurt_data %>%
pivot_longer(cols = starts_with("y"), names_to = "product", values_to = "choice") %>%
mutate(product = as.integer(str_extract(product, "\\d"))) %>%
pivot_longer(cols = starts_with("f"), names_to = "feature_product", values_to = "featured") %>%
mutate(feature_product = as.integer(str_extract(feature_product, "\\d"))) %>%
filter(product == feature_product) %>%
pivot_longer(cols = starts_with("p"), names_to = "price_product", values_to = "price") %>%
mutate(price_product = as.integer(str_extract(price_product, "\\d"))) %>%
filter(product == price_product) %>%
select(id, product, choice, featured, price) %>%
mutate(yogurt1 = ifelse(product == 1, 1, 0),
yogurt2 = ifelse(product == 2, 1, 0),
yogurt3 = ifelse(product == 3, 1, 0)) %>%
arrange(id, product)
library(readr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
if (!require(tidyr)) {
install.packages("tidyr")
library(tidyr)
}
if (!require(dplyr)) {
install.packages("dplyr")
library(dplyr)
}
# Load the dataset
yogurt_data <- read_csv("/Users/danielgarciagomar/Documents/UCSD/MPP/Spring/Marketing Analytics/Quarto/quarto_website/projects/project3/yogurt_data.csv")
# Reshape the data from wide to long format
yogurt_long <- yogurt_data %>%
pivot_longer(cols = starts_with("y"), names_to = "product", values_to = "choice") %>%
mutate(product = as.integer(str_extract(product, "\\d"))) %>%
pivot_longer(cols = starts_with("f"), names_to = "feature_product", values_to = "featured") %>%
mutate(feature_product = as.integer(str_extract(feature_product, "\\d"))) %>%
filter(product == feature_product) %>%
pivot_longer(cols = starts_with("p"), names_to = "price_product", values_to = "price") %>%
mutate(price_product = as.integer(str_extract(price_product, "\\d"))) %>%
filter(product == price_product) %>%
select(id, product, choice, featured, price) %>%
mutate(yogurt1 = ifelse(product == 1, 1, 0),
yogurt2 = ifelse(product == 2, 1, 0),
yogurt3 = ifelse(product == 3, 1, 0)) %>%
arrange(id, product)
# Reshape the data from wide to long format
yogurt_long <- yogurt_data %>%
pivot_longer(cols = starts_with("y"), names_to = "product", values_to = "choice") %>%
pivot_longer(cols = starts_with("f"), names_to = "feature_product", values_to = "featured") %>%
pivot_longer(cols = starts_with("p"), names_to = "price_product", values_to = "price")
# Reshape the choice data from wide to long format
choice_long <- yogurt_data %>%
pivot_longer(cols = starts_with("y"), names_to = "product", names_prefix = "y", values_to = "choice") %>%
mutate(product = as.integer(product))
# Reshape the featured data from wide to long format
featured_long <- yogurt_data %>%
pivot_longer(cols = starts_with("f"), names_to = "product", names_prefix = "f", values_to = "featured") %>%
mutate(product = as.integer(product))
# Reshape the price data from wide to long format
price_long <- yogurt_data %>%
pivot_longer(cols = starts_with("p"), names_to = "product", names_prefix = "p", values_to = "price") %>%
mutate(product = as.integer(product))
# Merge the long dataframes on 'id' and 'product'
yogurt_long <- choice_long %>%
left_join(featured_long, by = c("id", "product")) %>%
left_join(price_long, by = c("id", "product"))
# Add binary variables for the first 3 products
yogurt_long <- yogurt_long %>%
mutate(yogurt1 = ifelse(product == 1, 1, 0),
yogurt2 = ifelse(product == 2, 1, 0),
yogurt3 = ifelse(product == 3, 1, 0))
# Order the data
yogurt_long <- yogurt_long %>%
arrange(id, product)
# Display the first few rows of the reshaped dataset
head(yogurt_long)
# Reshape the choice data from wide to long format
choice_long <- yogurt_data %>%
pivot_longer(cols = starts_with("y"), names_to = "product", names_prefix = "y", values_to = "choice") %>%
mutate(product = as.integer(product))
# Reshape the featured data from wide to long format
featured_long <- yogurt_data %>%
pivot_longer(cols = starts_with("f"), names_to = "product", names_prefix = "f", values_to = "featured") %>%
mutate(product = as.integer(product))
# Reshape the price data from wide to long format
price_long <- yogurt_data %>%
pivot_longer(cols = starts_with("p"), names_to = "product", names_prefix = "p", values_to = "price") %>%
mutate(product = as.integer(product))
# Merge the long dataframes on 'id' and 'product'
yogurt_long <- choice_long %>%
left_join(featured_long, by = c("id", "product")) %>%
left_join(price_long, by = c("id", "product"))
# Add binary variables for the first 3 products
yogurt_long <- yogurt_long %>%
mutate(yogurt1 = ifelse(product == 1, 1, 0),
yogurt2 = ifelse(product == 2, 1, 0),
yogurt3 = ifelse(product == 3, 1, 0))
# Order the data
yogurt_long <- yogurt_long %>%
arrange(id, product)
# Load necessary library for optimization
library(maxLik)
installed.packages('maxLik')
# Define the log-likelihood function
log_likelihood <- function(beta, data) {
# Extract the feature matrix and choice vector
X <- as.matrix(data %>% select(yogurt1, yogurt2, yogurt3, featured, price))
choice <- data$choice
# Compute the utility for each product
utilities <- X %*% beta
# Compute the exponentiated utilities
exp_utilities <- exp(utilities)
# Compute the probability of each product being chosen
choice_prob <- exp_utilities / rowSums(matrix(exp_utilities, ncol = length(unique(data$product)), byrow = TRUE))
# Compute the log-likelihood
log_likelihood <- sum(choice * log(choice_prob))
# Return negative log-likelihood for minimization
return(-log_likelihood)
}
# Prepare the data for the log-likelihood function
data_prepared <- yogurt_long %>%
group_by(id) %>%
mutate(choice = ifelse(choice == 1, 1, 0)) %>%
ungroup()
# Initial values for beta
initial_beta <- rep(0, 5)
# Optimize the log-likelihood function to find the best-fitting beta
result <- optim(par = initial_beta, fn = log_likelihood, data = data_prepared, method = "BFGS", hessian = TRUE)
# Display the results
result$par
install.packages("knitr")
install.packages("kableExtra")
